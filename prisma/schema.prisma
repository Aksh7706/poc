// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id           String @id @default(uuid())
  name         String
  apiKey       String @map("api_key")
  ownerAddress String @unique @map("owner_address")
  App          App[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([ownerAddress])
}

model App {
  id          String  @id @default(uuid())
  name        String
  description String?
  metadata    Json?

  User     User[]
  Provider Provider[]
  Event    Event[]

  Account      Account @relation(fields: [ownerAddress], references: [ownerAddress], onDelete: Cascade)
  ownerAddress String  @map("owner_address")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([name, ownerAddress])
  @@index([name, ownerAddress])
}

model User {
  id            String             @id @default(uuid())
  walletAddress String             @map("wallet_address")
  mobile        String?
  email         String?
  telegramData  TelegramProvider[]
  fcmToken      String[]           @map("fcm_token")
  metadata      Json?
  app           App                @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId         String             @map("app_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([walletAddress, appId])
  @@index([walletAddress, appId])
}

model TelegramProvider {
  walletAddress String @map("wallet_address")
  appId         String @map("app_id")
  providerName  String @map("provider_name")
  chatId        String @map("chat_id")
  user          User   @relation(fields: [walletAddress, appId], references: [walletAddress, appId], onDelete: Cascade)

  @@unique([walletAddress, appId, providerName])
}

model Event {
  id                 String           @id @default(uuid())
  name               String
  template           String
  metadata           Json?
  connectedProviders EventProviders[]
  app                App              @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId              String           @map("app_id")
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @updatedAt @map("updated_at")

  @@unique([name, appId])
  @@index([name, appId])
}

model EventProviders {
  appId        String   @map("app_id")
  eventName    String   @map("event_name")
  provider     Provider @relation(fields: [providerName, appId], references: [name, appId], onDelete: Cascade)
  Event        Event    @relation(fields: [eventName, appId], references: [name, appId], onDelete: Cascade)
  providerName String   @map("provider_name")

  @@unique([appId, eventName, providerName])
}

model Provider {
  id             String           @id @default(uuid())
  name           String
  description    String?
  config         Json?
  channel        Channel
  providerKey    ProviderKey      @map("provider_key")
  statusCallback String?          @map("status_callback")
  app            App              @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId          String           @map("app_id")
  EventProviders EventProviders[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([name, appId])
  @@index([name, appId])
}

enum Channel {
  PUSH   @map("push")
  IN_APP @map("in_app")
  OTHER  @map("other")
}

enum ProviderKey {
  // Push Provider
  FIREBASE @map("firebase")

  // In App Provider
  PIGEON_WEB    @map("pigeon_web") // Our native InApp Provider for Web Platforms
  PIGEON_MOBILE @map("pigeon_mobile") // Our native InApp Provider for Mobile Platforms

  // Other Provider
  TELEGRAM @map("telegram")
  SLACK    @map("slack")
}

enum MessageStatus {
  DELIVERED @map("delivered")
  READ      @map("read")
  FAILED    @map("failed")
}

model InAppWebNotifications {
  requestId        String  @id @default(uuid())
  appName          String
  userWalletAdress String  @map("user_wallet_address")
  message          String
  isRead           Boolean
}

model NotificationLogs {
  requestId        String        @id @default(uuid())
  appName          String        @map("app_name")
  eventName        String        @map("event_name")
  providerName     String        @map("provider_name")
  channel          Channel
  provider         ProviderKey
  userWalletAdress String        @map("user_wallet_address")
  message          String
  status           MessageStatus
}
